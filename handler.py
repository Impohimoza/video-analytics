from abc import ABC, abstractmethod
from typing import Any


class Handler(ABC):
    """Интерфейс компонента аналитики."""
    def on_start(self, *args, **kwargs) -> Any:
        """Метод, который вызывается перед началом работы компонента.

        В него стоит помещать инициализацию:
        - необходимых ресурсов, связанных с хранением состояния;
        - весов моделей;
        - коллекций;
        - объектов.

        Общая рекомендация следующая:
        в конструкторе оставляем инициализацию только простых типов
        Идея в том, чтобы сократить объём копирования при запуске хендлера
        в отдельном fork-процессе.

        По умолчанию ничего не делает.
        """
        pass

    @abstractmethod
    def handle(self, *args, **kwargs) -> Any:
        """Метод, выполняющий основную работу."""
        raise NotImplementedError

    def on_exit(self, *args, **kwargs) -> None:
        """Метод, вызывающийся после завершения работы компонента.
        Должен освобождать инициализированные ресурсы.
        По умолчанию ничего не делает.
        """
        pass
